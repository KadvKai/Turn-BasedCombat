//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""BaseInput"",
            ""id"": ""ea0f3bcb-d734-42ad-807c-f6115d7c1266"",
            ""actions"": [
                {
                    ""name"": ""Targeting"",
                    ""type"": ""Value"",
                    ""id"": ""46954c39-ccc2-4f41-a8a1-155e3aef84c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""5314df32-14f2-4999-8121-cd2e73af5ad5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce3733b4-3e00-4cd4-bb4d-5bc3b8128675"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Targeting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4e8651b-893b-44bc-92b2-dc635f4dacc5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseInput
        m_BaseInput = asset.FindActionMap("BaseInput", throwIfNotFound: true);
        m_BaseInput_Targeting = m_BaseInput.FindAction("Targeting", throwIfNotFound: true);
        m_BaseInput_Selection = m_BaseInput.FindAction("Selection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseInput
    private readonly InputActionMap m_BaseInput;
    private IBaseInputActions m_BaseInputActionsCallbackInterface;
    private readonly InputAction m_BaseInput_Targeting;
    private readonly InputAction m_BaseInput_Selection;
    public struct BaseInputActions
    {
        private @PlayerInput m_Wrapper;
        public BaseInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Targeting => m_Wrapper.m_BaseInput_Targeting;
        public InputAction @Selection => m_Wrapper.m_BaseInput_Selection;
        public InputActionMap Get() { return m_Wrapper.m_BaseInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseInputActions set) { return set.Get(); }
        public void SetCallbacks(IBaseInputActions instance)
        {
            if (m_Wrapper.m_BaseInputActionsCallbackInterface != null)
            {
                @Targeting.started -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnTargeting;
                @Targeting.performed -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnTargeting;
                @Targeting.canceled -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnTargeting;
                @Selection.started -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnSelection;
                @Selection.performed -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnSelection;
                @Selection.canceled -= m_Wrapper.m_BaseInputActionsCallbackInterface.OnSelection;
            }
            m_Wrapper.m_BaseInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Targeting.started += instance.OnTargeting;
                @Targeting.performed += instance.OnTargeting;
                @Targeting.canceled += instance.OnTargeting;
                @Selection.started += instance.OnSelection;
                @Selection.performed += instance.OnSelection;
                @Selection.canceled += instance.OnSelection;
            }
        }
    }
    public BaseInputActions @BaseInput => new BaseInputActions(this);
    public interface IBaseInputActions
    {
        void OnTargeting(InputAction.CallbackContext context);
        void OnSelection(InputAction.CallbackContext context);
    }
}
